options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = true;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(C0Parser)

package parser;

import astnodes.*;

public class C0Parser {
}

PARSER_END(C0Parser)

/************************************************
 *        TOKEN SPECIFICATION STARTS HERE       *
 ************************************************/

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* RESERVED WORDS: Page 15 C0-Ref */
TOKEN :
{
  < INT: "int" >
| < BOOL: "bool" >
| < STRING: "string" >
| < CHAR: "char" >
| < VOID: "void" >
| < STRUCT: "struct" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < FOR: "for" >
| < CONTINUE: "continue" >
| < BREAK: "break" >
| < RETURN: "return" >
| < ASSERT: "assert" >
| < TRUE: "true" >
| < FALSE: "false" >
| < NULL: "NULL" >
| < ALLOC: "alloc" >
| < ALLOC_ARRAY: "alloc_array" >
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < FIELD_DEREF: "->" >
}

/* OPERATORS: Page 18 C0-Ref */
TOKEN : 
{
  < BANG: "!" >
| < TILDE: "~" >
| < STAR: "*" >
| < INCR: "++" >
| < DECR: "--" >
| < SLASH: "/" >
| < MOD: "%" > // was called REM before, i think MOD is more descriptive. ~S.H.
| < PLUS: "+" >
| < MINUS: "-" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < GT: ">" >
| < EQ: "==" >
| < NE: "!=" >
| < BIT_AND: "&" >
| < XOR: "^" >
| < BIT_OR: "|" >
| < SC_AND: "&&" >
| < SC_OR: "||" >
| < HOOK: "?" >
| < COLON: ":" >
| < ASSIGN: "=" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < REMASSIGN: "%=" >
| < ANDASSIGN: "&=" >
| < XORASSIGN: "^=" >
| < ORASSIGN: "|=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
}

/* LITERALS */
TOKEN : 
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN :
{
  < CHAR_LITERAL: "'" ~["\r", "\n", "\t"] "'" > // Empty ' ' allowed? e.g. char c = ' '
| < STRING_LITERAL: "\"" (~["\r", "\n", "\t"])* "\"" > 
}

TOKEN [IGNORE_CASE] :
{
  < IDENTIFIER: ["a"-"z"] ( ["a"-"z"] | ["0"-"9"] )* >
}

/* COMMENTS */      // CHECK LATER STUFF LIKE char* str = "Dies ist ein String mit /*, also kein Comment"
SKIP :
{
  < "//" (~["\r", "\n"])* >
|
  < "/*" > : MULTI_LINE_COMMENT
}

<MULTI_LINE_COMMENT> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] > // ~[] = all characters
}

/************************************************
 * THE C0 GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

Node parseTree() :
{
  Node rootNode = new Node();
}
{
  //global Sachen parsen <prog> (globale Deklarationen und globale Funktionen)
  // Danach Statements, die expression usw.
  
  basic_expr() <EOF> 
  {
     return rootNode;
  }
}

void basic_expr() :
{}
{
  //Type() <IDENTIFIER> <ASSIGN> <INTEGER_LITERAL>
  Expression()
}

///////////////////////////////////////
/////    Different Identifiers    /////
///////////////////////////////////////

// Is it important to make a distinction?

// For variable + function names
void VID() :
{}
{
  <IDENTIFIER>
}

// Structnames
void SID() :
{}
{
  <IDENTIFIER>
}

// Field names
void FID() :
{}
{
  <IDENTIFIER>
}

///////////////////////////////////////
/////         Data-Types          /////
///////////////////////////////////////

void Struct() :
{}
{
  <STRUCT> SID()
}

void PrimitiveType() :
{}
{
  <INT>
| <BOOL>
| <STRING>
| <CHAR>
| <VOID>
}

void Type() :
{}
{
  (PrimitiveType() | Struct()) [<STAR> | <LBRACKET> <RBRACKET>] // Pointers + Arrays optional e.g. struct Test*, struct Test[], int*, string
}

///////////////////////////////////////
/////     How do we call it?      /////
///////////////////////////////////////

// Examples are: *test, test.data, test->data, (test)
void Lv() :
{}
{ 
  [<STAR>] VID() [<DOT> FID() | <FIELD_DEREF> FID() | Expression()] 
  | <LPAREN> Lv() <RPAREN>
}

///////////////////////////////////////
/////        Operators            /////
///////////////////////////////////////

void UnaryOperator() :
{}
{
  <BANG>
| <TILDE>
| <INCR>
| <DECR>
| <MINUS>
}

void BinaryOperator() :
{}
{
  <STAR>
| <SLASH>
| <MOD>
| <PLUS>
| <MINUS>
| <LSHIFT>
| <RSIGNEDSHIFT>
| <LT>
| <LE>
| <GE>
| <GT>
| <EQ>
| <NE>
| <BIT_AND>
| <XOR>
| <BIT_OR>
| <SC_AND>
| <SC_OR>
| <ASSIGN>
| <PLUSASSIGN>
| <MINUSASSIGN>
| <STARASSIGN>
| <SLASHASSIGN>
| <REMASSIGN>
| <ANDASSIGN>
| <XORASSIGN>
| <ORASSIGN>
| <LSHIFTASSIGN>
| <RSIGNEDSHIFTASSIGN>
}

///////////////////////////////////////
/////        Expressions          /////
///////////////////////////////////////

void Expression() :
{}
{
  <LPAREN> Expression() <RPAREN>
| <INTEGER_LITERAL> | <STRING_LITERAL> | <CHAR_LITERAL>
| <TRUE> | <FALSE> | <NULL>
| VID()
//| Expression() BinaryOperator() Expression()
//| UnaryOperator() Expression()
//| Expression() <HOOK> Expression() <COLON> Expression()
//| VID() <LPAREN> Expression() (<COMMA> Expression())* <RPAREN>
//| Expression() <DOT> FID()
//| Expression() <FIELD_DEREF> FID()
//| Expression() [Expression()]
//| <ALLOC> <LPAREN> Type() <RPAREN>
//| <ALLOC_ARRAY> <LPAREN> Type() <COMMA> Expression() <RPAREN>
}
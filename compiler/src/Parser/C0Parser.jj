options {
  LOOKAHEAD = 15;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = true;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(C0Parser)

package parser;

import java.util.ArrayList;
import java.util.List;

import ast.*;
import ast.declaration.*;
import ast.definition.*;
import ast.expression.*;
import ast.identifier.*;
import ast.statement.*;
import ast.type.*;

public class C0Parser {
}

PARSER_END(C0Parser)

/************************************************
 *        TOKEN SPECIFICATION STARTS HERE       *
 ************************************************/

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* RESERVED WORDS: Page 15 C0-Ref */
TOKEN :
{
  < INT: "int" >
| < BOOL: "bool" >
| < STRING: "string" >
| < CHAR: "char" >
| < VOID: "void" >
| < STRUCT: "struct" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < FOR: "for" >
| < CONTINUE: "continue" >
| < BREAK: "break" >
| < RETURN: "return" >
| < TRUE: "true" >
| < FALSE: "false" >
| < NULL: "NULL" >
| < ALLOC: "alloc" >
| < ALLOC_ARRAY: "alloc_array" >
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < FIELD_DEREF: "->" >
}

/* OPERATORS: Page 18 C0-Ref */
TOKEN : 
{
  < BANG: "!" >
| < TILDE: "~" >
| < STAR: "*" >
| < INCR: "++" >
| < DECR: "--" >
| < SLASH: "/" >
| < REM: "%" >
| < PLUS: "+" >
| < MINUS: "-" >
| < LSHIFT: "<<" >
| < RSHIFT: ">>" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < GT: ">" >
| < EQ: "==" >
| < NE: "!=" >
| < BIT_AND: "&" >
| < XOR: "^" >
| < BIT_OR: "|" >
| < SC_AND: "&&" >
| < SC_OR: "||" >
| < HOOK: "?" >
| < COLON: ":" >
| < ASSIGN: "=" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < REMASSIGN: "%=" >
| < ANDASSIGN: "&=" >
| < XORASSIGN: "^=" >
| < ORASSIGN: "|=" >
| < LSHIFTASSIGN: "<<=" >
| < RSHIFTASSIGN: ">>=" >
}

/* LITERALS */
TOKEN : 
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL> 
  >
|
  < #DECIMAL_LITERAL: "0" | ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
}

/* Char's + String's */
TOKEN :
{
  < CHAR_LITERAL: "'" (~["\r", "\n", "\t", "'", "\\"] | "\\0") "'" > // Should empty ' ' allowed? e.g. char c = ' '. For now it is
// | < STRING_LITERAL: "\"" (~["\r", "\n", "\t", "\"", "\\"] | "\\\"" | "\\\\" )* "\"" > // Hard to understand, so i splitted it
}

MORE :
{
  < STRING_BEGIN: "\"" > : IN_STRING_LITERAL 
}

<IN_STRING_LITERAL> TOKEN :
{
  <STRING_LITERAL: "\""> : DEFAULT
}

<IN_STRING_LITERAL> MORE :
{
 <~["\r", "\n", "\t", "\"", "\\"]> // every character except those in brackets
| "\\n"  // \n
| "\\t"  // \t
| "\\v"  // \v
| "\\b"  // \b
| "\\r"  // \r
| "\\f"  // \f
| "\\a"  // \a
| "\\\\" // \\
| "\\'"  // \'
| "\\\"" // \"
}

/* Identifiers */
TOKEN [IGNORE_CASE] :
{
  < IDENTIFIER: ["a"-"z"] ( ["a"-"z"] | ["0"-"9"] | "_")* >
}

/* COMMENTS */
SKIP :
{
  < "//" (~["\r", "\n"])* >
|
  < "/*" > : MULTI_LINE_COMMENT
}

<MULTI_LINE_COMMENT> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] > // ~[] = all characters
}

/************************************************
 * THE C0 GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

AST parseTree() :
{
  AST ast = new AST();
  FileUnit rootNode; 
}
{
  rootNode = prog() <EOF> 
  {
    ast.setRoot(rootNode);
    return ast;
  }
}

FileUnit prog() :
{
  List<Declaration> globalDeclarations = new ArrayList<Declaration>();
  List<Definition> globalDefinitions = new ArrayList<Definition>();
}
{
  (
    { Declaration decl; }
    decl = GDECL() 
    { globalDeclarations.add(decl); }
    | 
    { Definition def; } 
    def = GDEFN()
    { globalDefinitions.add(def); }
  )* 
  { 
     return new FileUnit(globalDeclarations, globalDefinitions); 
  }
}

///////////////////////////////////////
/////    Different Identifiers    /////
///////////////////////////////////////

// Is it important to make a distinction?

// For variable + function names
VariableFunctionIdentifier VID() :
{
  Token token;
}
{
  token = <IDENTIFIER>
  { return new VariableFunctionIdentifier(token); } 
}

// For function parameter
ParameterIdentifier PARAID() :
{
  Token token;
}
{
  token = <IDENTIFIER>
  { return new ParameterIdentifier(token); } 
}

// Structnames
StructIdentifier SID() :
{
  Token token;
}
{
  token = <IDENTIFIER>
  { return new StructIdentifier(token); }
}

// Field names
FieldIdentifier FID() :
{
    Token token;
}
{
  token = <IDENTIFIER>
  { return new FieldIdentifier(token); }
}

///////////////////////////////////////
/////         Data-Types          /////
///////////////////////////////////////

StructType Struct() :
{
  StructIdentifier structId;
}
{
  <STRUCT> structId = SID()
  {
    StructType structType = new StructType(structId);
    return structType;
  }
}

PrimitiveType PrimitiveType() :
{
  Token token;
}
{
  (
      token = <INT>
    | token = <BOOL>
    | token = <STRING>
    | token = <CHAR>
    | token = <VOID>
  )
  {
    PrimitiveType primitiveType = new PrimitiveType(); //set type name..
    return primitiveType;
  }
}

Type Type() :
{
  Type type;  
}
{    
  (
    (  
      type = PrimitiveType() 
      | type = Struct()
    )
    [ // Pointers + Arrays optional e.g. struct Test*, struct Test[], int*, string
        <STAR> 
        {
          ReferenceType refType = new ReferenceType();
          //refType... = type ... 
          type = refType;
        }
        | <LBRACKET> <RBRACKET>
        {
          ArrayType arrType = new ArrayType();
          // arrType ... = type ...
          type = arrType;
        }
    ]
  )
  { return type; } 
}

///////////////////////////////////////
/////          L-Value            /////
///////////////////////////////////////

// Examples are: *test, test.data, test->data, (test)
void Lv() :
{}
{ 
<LPAREN> Lv() <RPAREN>
| VID() [
          <DOT> FID() 
          | <FIELD_DEREF> FID() 
          | (<LBRACKET> Expression() <RBRACKET>)
        ]
| <STAR> Lv()
}

///////////////////////////////////////
/////        Operators            /////
///////////////////////////////////////

// Page 15 C0-Reference - Can we transfer those to the lexer? Ja
void Sep() :
{}
{
  <LPAREN>
| <RPAREN>
| <LBRACKET>
| <RBRACKET>
| <LBRACE>
| <RBRACE>
| <COMMA>
| <SEMICOLON>
}

Token UnaryOp() :
{ 
  Token token;
}
{  
  ( 
      token = <BANG>
    | token = <TILDE>
    | token = <MINUS>
    | token = <STAR>
  )
  {
    return token; // use Token
  }
}

Token BinaryOp() :
{
  Token token;
}
{
  (  
    token = <STAR>
    | token = <SLASH>
    | token = <REM>
    | token = <PLUS>
    | token = <MINUS>
    | token = <LSHIFT>
    | token = <RSHIFT>
    | token = <LT>
    | token = <LE>
    | token = <GE>
    | token = <GT>
    | token = <EQ>
    | token = <NE>
    | token = <BIT_AND>
    | token = <XOR>
    | token = <BIT_OR>
    | token = <SC_AND>
    | token = <SC_OR>
    | token = <DOT>         // How is this a binary expression? LOOKAHEAD of 2 is necessary if these are specified
    | token = <FIELD_DEREF> // How is this a binary expression?
    | token = <HOOK>        // How is this a binary expression?
    | token = <COLON>       // How is this a binary expression?
  )
  {
    return token;
  }
}

void AsnOp() :
{}
{
  <ASSIGN>
| <PLUSASSIGN>
| <MINUSASSIGN>
| <STARASSIGN>
| <SLASHASSIGN>
| <REMASSIGN>
| <LSHIFTASSIGN>
| <RSHIFTASSIGN>
| <ANDASSIGN>
| <XORASSIGN>
| <ORASSIGN>
}

void PostOp() :
{}
{
  <DECR> | <INCR>
}

///////////////////////////////////////
/////        Expressions          /////
///////////////////////////////////////

// THIS IS NOT OPTIMAL. BEST WOULD BE TO USE LOCAL LOOKAHEADS AND MAKE THE GLOBAL LOOKAHEAD SMALLER
void Expression() :
{}
{
  (
  <LPAREN> Expression() <RPAREN>
| <INTEGER_LITERAL> | <STRING_LITERAL> | <CHAR_LITERAL>
| <TRUE> | <FALSE> | <NULL>
| VID() [<LPAREN> [ Expression() (<COMMA> Expression())* ] <RPAREN>]
| UnaryOp() Expression()
| <ALLOC> <LPAREN> Type() <RPAREN>
| <ALLOC_ARRAY> <LPAREN> Type() <COMMA> Expression() <RPAREN>
  )

  [
    BinaryOp() Expression() // Putting this again below allows to parse expressions like k[] = 3 and f().f().f()
  | <HOOK> Expression() <COLON> Expression()  // e.g. 3 > 5 ? true : false
  | <DOT> FID()                               // Expression() <DOT> FID()
  | <FIELD_DEREF> FID()                       // Expression() <FIELD_DEREF> FID()
  | <LBRACKET> Expression() <RBRACKET>        // Expression() [ Expression() ]
  ]
  /*[
    BinaryOp() Expression()                   // Expression() BinaryOp() Expression() -- still need?
  ]*/
}

///////////////////////////////////////
/////      Simple Statement       /////
///////////////////////////////////////

ASTNode Simple() :
{ 
  ASTNode node = null;
}
{
    Lv() AsnOp() Expression()
     { return node; }
  | Lv() PostOp()
    { return node; }
  | Expression()
    { return node; }
  | Type() VID() [ <ASSIGN> Expression() ]
    { return node; }
}

///////////////////////////////////////
/////          Statement          /////
///////////////////////////////////////

ASTNode STMT() :
{
  ASTNode node;
}
{
  node = Simple() <SEMICOLON>
    { return node; }
  | node = IfStatement()   
    { return node; }
  | node = WhileStatement()   
    { return node; }
  | node = ForStatement()
    { return node; }
  | node = ReturnStatement()
    { return node; }
  | node = BlockStatement()
    { return node; }
}

IfStatement IfStatement() :
{
  // use expression, statement objects
}
{
  <IF> <LPAREN> Expression() <RPAREN> STMT() [<ELSE> STMT()]
  { return new IfStatement(); }
}

WhileStatement WhileStatement() :
{
  // use expression and statement object
}
{
  <WHILE> <LPAREN> Expression() <RPAREN> STMT()
  { return new WhileStatement(); }
}

ForStatement ForStatement() :
{
  //use simple-, expression- and statement-objects
}
{
  <FOR> <LPAREN> [Simple()] <SEMICOLON> Expression() <SEMICOLON> [Simple()] <RPAREN> STMT()
  { return new ForStatement(); }
}

ReturnStatement ReturnStatement() :
{
  //use expression object
}
{
  <RETURN> [Expression()] <SEMICOLON>
  { return new ReturnStatement(); }
}

BlockStatement BlockStatement() :
{
  // use statements-objets
}
{
  <LBRACE> (STMT())* <RBRACE>
  { return new BlockStatement(); }
}

///////////////////////////////////////
/////     Global Definition       /////
///////////////////////////////////////

Definition GDEFN() :
{
  Definition node;
}
{
  node = GlobalStructDefinition()
    { return node; }
  | node = GlobalFunctionDefinition()
    { return node; }
}

StructDefinition GlobalStructDefinition() :
{
  StructIdentifier structId;
  List<FieldDefinition> fieldDefs = new ArrayList<FieldDefinition>();
}
{
  <STRUCT> structId = SID() <LBRACE> 
  (
    { FieldDefinition fieldDef; }
    fieldDef = FieldDefinition()
    { fieldDefs.add(fieldDef); }
  )* 
  <RBRACE> <SEMICOLON>
  { return new StructDefinition(new StructType(structId), structId, fieldDefs); }
}

FieldDefinition FieldDefinition():
{
  Type fieldType;
  FieldIdentifier fieldId;
}
{
  fieldType = Type() fieldId = FID() <SEMICOLON>
  {
    return new FieldDefinition(fieldType, fieldId);
  }
}

FunctionDefinition GlobalFunctionDefinition() :
{
  Type returnType;
  VariableFunctionIdentifier funcId;
  List<ParameterDefinition> parameterDefs;
}
{
  returnType = Type() funcId = VID() <LPAREN> parameterDefs = ParameterDefinitions() <RPAREN> <LBRACE> (STMT())* <RBRACE>
  { return new FunctionDefinition(returnType, funcId, parameterDefs);  }
}


///////////////////////////////////////
/////      Global Declaration     /////
///////////////////////////////////////

Declaration GDECL() :
{
  Declaration node;
}
{
  node = GlobalStructDeklaration()
    { return node; }
  | node = GlobalFunctionDeclartion()
    { return node; }
}

StructDeclaration GlobalStructDeklaration() :
{
  StructIdentifier structId;
}
{
  <STRUCT> structId = SID() <SEMICOLON>
  { return new StructDeclaration(new StructType(structId), structId); }
}

FunctionDeclaration GlobalFunctionDeclartion() :
{
  Type returnType;
  VariableFunctionIdentifier funcId;
  List<ParameterDefinition> parameterDefs;
}
{
  returnType = Type() funcId = VID() <LPAREN> parameterDefs = ParameterDefinitions() <RPAREN> <SEMICOLON>
  { return new FunctionDeclaration(returnType, funcId, parameterDefs); }
}

List<ParameterDefinition> ParameterDefinitions() :
{
  List<ParameterDefinition> parameterDefs = new ArrayList<ParameterDefinition>();
  Type firstParaType;
  ParameterIdentifier firstParaId;
}
{
  [ 
    firstParaType = Type() firstParaId = PARAID() 
    { parameterDefs.add(new ParameterDefinition(firstParaType, firstParaId)); } 
    (
      {   
        Type additionalParaType;
        ParameterIdentifier additionalParaId;         
      }
      <COMMA> additionalParaType = Type() additionalParaId = PARAID()
      { parameterDefs.add(new ParameterDefinition(additionalParaType, additionalParaId)); }
    )* 
  ]
  { return parameterDefs; }
}
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = true;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(C0Parser)

package parser;

import java.util.ArrayList;
import java.util.List;

import ast.*;
import ast.declaration.*;
import ast.definition.*;
import ast.expression.*;
import ast.identifier.*;
import ast.statement.*;
import ast.type.*;

public class C0Parser {
}

PARSER_END(C0Parser)

/************************************************
 *        TOKEN SPECIFICATION STARTS HERE       *
 ************************************************/

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* RESERVED WORDS: Page 15 C0-Ref */
TOKEN :
{
  < INT: "int" >
| < BOOL: "bool" >
| < STRING: "string" >
| < CHAR: "char" >
| < VOID: "void" >
| < STRUCT: "struct" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < FOR: "for" >
| < CONTINUE: "continue" >
| < BREAK: "break" >
| < RETURN: "return" >
| < TRUE: "true" >
| < FALSE: "false" >
| < NULL: "NULL" >
| < ALLOC: "alloc" >
| < ALLOC_ARRAY: "alloc_array" >
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < FIELD_DEREF: "->" >
}

/* OPERATORS: Page 18 C0-Ref */
TOKEN : 
{
  < BANG: "!" >
| < TILDE: "~" >
| < STAR: "*" >
| < INCR: "++" >
| < DECR: "--" >
| < SLASH: "/" >
| < REM: "%" >
| < PLUS: "+" >
| < MINUS: "-" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < GT: ">" >
| < EQ: "==" >
| < NE: "!=" >
| < XOR: "^" >
| < SC_AND: "&&" >
| < SC_OR: "||" >
| < HOOK: "?" >
| < COLON: ":" >
| < ASSIGN: "=" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < REMASSIGN: "%=" >
| < ANDASSIGN: "&=" >
| < XORASSIGN: "^=" >
| < ORASSIGN: "|=" >
}

/* LITERALS */
TOKEN : 
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL> 
      | <BIN_LITERAL>
  >
|
  < #DECIMAL_LITERAL: "0" | ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #BIN_LITERAL: "0" ["b","B"] (["0"-"1"])+ >
}

/* Char's + String's */
TOKEN :
{
  < CHAR_LITERAL: "'" (~["\r", "\n", "\t", "'", "\\"] | "\\0") "'" > // Should empty ' ' allowed? e.g. char c = ' '. For now it is
// | < STRING_LITERAL: "\"" (~["\r", "\n", "\t", "\"", "\\"] | "\\\"" | "\\\\" )* "\"" > // Hard to understand, so i splitted it
}

MORE :
{
  < STRING_BEGIN: "\"" > : IN_STRING_LITERAL 
}

<IN_STRING_LITERAL> TOKEN :
{
  <STRING_LITERAL: "\""> : DEFAULT
}

<IN_STRING_LITERAL> MORE :
{
 <~["\r", "\n", "\t", "\"", "\\"]> // every character except those in brackets
| "\\n"  // \n
| "\\t"  // \t
| "\\v"  // \v
| "\\b"  // \b
| "\\r"  // \r
| "\\f"  // \f
| "\\a"  // \a
| "\\\\" // \\
| "\\'"  // \'
| "\\\"" // \"
}

/* Identifiers */
TOKEN [IGNORE_CASE] :
{
  < IDENTIFIER: ["a"-"z"] ( ["a"-"z"] | ["0"-"9"] | "_")* >
}

/* COMMENTS */
SKIP :
{
  < "//" (~["\r", "\n"])* >
|
  < "/*" > : MULTI_LINE_COMMENT
}

<MULTI_LINE_COMMENT> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] > // ~[] = all characters
}

/************************************************
 * THE C0 GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

AST parseTree() :
{
  AST ast = new AST();
  FileUnit rootNode; 
}
{
  rootNode = prog() <EOF> 
  {
    ast.setRoot(rootNode);
    return ast;
  }
}

FileUnit prog() :
{
  List<Declaration> globalDeclarations = new ArrayList<Declaration>();
  List<Definition> globalDefinitions = new ArrayList<Definition>();
}
{
  (
     // Syntactic-Lookahead, JavaCC will try this out and if it not matches it will take the other choice (in this case a definition)
     // This is necessary because the amount of parameters can be infinite e.g. void func(int a, int b, ..., int n);
    LOOKAHEAD(GDECL())
    { Declaration decl; }
    decl = GDECL()
    { globalDeclarations.add(decl); }    
    | 
    { Definition def; } 
    def = GDEFN()
    { globalDefinitions.add(def); }
  )* 
  { 
     return new FileUnit(globalDeclarations, globalDefinitions); 
  }
}

///////////////////////////////////////
/////    Different Identifiers    /////
///////////////////////////////////////

VariableFunctionIdentifier VID() :
{
  Token token;
}
{
  token = <IDENTIFIER>
  { return new VariableFunctionIdentifier(token); } 
}

ParameterIdentifier PARAID() :
{
  Token token;
}
{
  token = <IDENTIFIER>
  { return new ParameterIdentifier(token); } 
}

StructIdentifier SID() :
{
  Token token;
}
{
  token = <IDENTIFIER>
  { return new StructIdentifier(token); }
}

FieldIdentifier FID() :
{
    Token token;
}
{
  token = <IDENTIFIER>
  { return new FieldIdentifier(token); }
}

///////////////////////////////////////
/////         Data-Types          /////
///////////////////////////////////////

StructType Struct() :
{
  StructIdentifier structId;
}
{
  <STRUCT> structId = SID()
  {
    StructType structType = new StructType(structId);
    return structType;
  }
}

PrimitiveType PrimitiveType() :
{
  Token token;
}
{
  (
      token = <INT>
    | token = <BOOL>
    | token = <STRING>
    | token = <CHAR>
    | token = <VOID>
  )
  {
    PrimitiveType primitiveType = new PrimitiveType(token.image);
    return primitiveType;
  }
}

Type Type() :
{
  Type type;  
}
{    
  (
    (  
      type = PrimitiveType() 
      | type = Struct()
    )
    (
        <STAR> //Pointer
        {
          type = new ReferenceType(type);
        }
        | <LBRACKET> <RBRACKET> // Array
        {
          type = new ArrayType(type);
        }      
    )*
  )
  { return type; } 
}

///////////////////////////////////////
/////          L-Value            /////
///////////////////////////////////////

// Examples are: (test), test.data, test->data, *test, test[], test->data[0] = 
void Lv() :
{}
{ 
<LPAREN> Lv() <RPAREN>
| VID() 
  [
    (
      <DOT> FID() 
      | <FIELD_DEREF> FID() 
      | (<LBRACKET> Expression() <RBRACKET>)
    )+
  ]
| <STAR> Lv()
}

///////////////////////////////////////
/////        Operators            /////
///////////////////////////////////////

// Page 15 C0-Reference - Can we transfer those to the lexer? Ja
void Sep() :
{}
{
  <LPAREN>
| <RPAREN>
| <LBRACKET>
| <RBRACKET>
| <LBRACE>
| <RBRACE>
| <COMMA>
| <SEMICOLON>
}

Token UnaryOp() :
{ 
  Token token;
}
{  
  ( 
      token = <BANG>
    | token = <TILDE>
    | token = <MINUS>
    | token = <STAR>
  )
  {
    return token; // use Token
  }
}

Token BinaryOp() :
{
  Token token;
}
{
  (  
    token = <STAR>
    | token = <SLASH>
    | token = <REM>
    | token = <PLUS>
    | token = <MINUS>
    | token = <LT>
    | token = <LE>
    | token = <GE>
    | token = <GT>
    | token = <EQ>
    | token = <NE>
    | token = <XOR>
    | token = <SC_AND>
    | token = <SC_OR>
//    | token = <DOT>         
//    | token = <FIELD_DEREF>
//    | token = <HOOK>       
//    | token = <COLON>      
  )
  {
    return token;
  }
}

void AsnOp() :
{}
{
  <ASSIGN>
| <PLUSASSIGN>
| <MINUSASSIGN>
| <STARASSIGN>
| <SLASHASSIGN>
| <REMASSIGN>
| <ANDASSIGN>
| <XORASSIGN>
| <ORASSIGN>
}

void PostOp() :
{}
{
  <DECR> | <INCR>
}

///////////////////////////////////////
/////        Expressions          /////
///////////////////////////////////////

// TODO refactor whole Expression()
/*Expression Expression() :
{
  Expression expression;
}
{
  (
    (
    <LPAREN> Expression() <RPAREN>
  | <INTEGER_LITERAL> | <STRING_LITERAL> | <CHAR_LITERAL>
  | <TRUE> | <FALSE> | <NULL>
  | VID() [LOOKAHEAD(2) <LPAREN> [Expression() (<COMMA> Expression())* ] <RPAREN>] // Lookahead of 1 necessary for matching e.g. func() and func(())
  | UnaryOp() Expression()
  | <ALLOC> <LPAREN> Type() <RPAREN>
  | <ALLOC_ARRAY> <LPAREN> Type() <COMMA> Expression() <RPAREN>
    )
    [
      <HOOK> Expression() <COLON> Expression()  // e.g. 3 > 5 ? true : false
    | <DOT> FID()                               // Expression() <DOT> FID()
    | <FIELD_DEREF> FID()                       // Expression() <FIELD_DEREF> FID()
    | <LBRACKET> Expression() <RBRACKET>        // Expression() [ Expression() ]
    ]
    [
      LOOKAHEAD(2) // TODO: what is the best here?
      BinaryOp() Expression() // Putting this again below allows to parse expressions like k[] = 3 and f().f().f()
    ]
  )
  { 
    expression = new BinaryExpression(); 
    return expression; 
  }
}*/

// Expression Expression() :
// { Expression expression; }
// {
//   (
//     (
//         <LPAREN> expression = Expression() <RPAREN> 
//       | <INTEGER_LITERAL> | <TRUE> | <FALSE> | <NULL>
//       | <ALLOC> <LPAREN> Type() <RPAREN>
//       | <ALLOC_ARRAY> <LPAREN> Type() <COMMA> Expression() <RPAREN>
//       | UnaryOp() Expression()
//       | VID() [ <LPAREN> Expression() (<COMMA> Expression())* <RPAREN> ]
//     )+
//     (
//       BinaryOp() ( 
//           FID() [ <LBRACKET> Expression() <RBRACKET> ] 
//           | Expression() [ <COLON> Expression() ]           
//         )
//       | <LBRACKET> Expression() <RBRACKET>
//     )*
//   )+
//   { 
//     expression = new BinaryExpression(); /* Dummy Expression*/
//     return expression; 
//   }
// }


// void Expression() :
// {}
// {
//   <LPAREN> Expression() <RPAREN>
// | <INTEGER_LITERAL> | <STRING_LITERAL> | <CHAR_LITERAL>
// | <TRUE> | <FALSE> | <NULL>
// | VID()
// | Expression() BinaryOperator() Expression()
// | UnaryOperator() Expression()
// | Expression() <HOOK> Expression() <COLON> Expression()
// | VID() <LPAREN> Expression() (<COMMA> Expression())* <RPAREN>
// | Expression() <DOT> FID()
// | Expression() <FIELD_DEREF> FID()
// | Expression() <LBRACKeT> Expression() <RBRACKET>
// | <ALLOC> <LPAREN> Type() <RPAREN>
// | <ALLOC_ARRAY> <LPAREN> Type() <COMMA> Expression() <RPAREN>
// }

// Created new Expressions
// there is no loop within a single expression (previous definitions wrong ?)
// only recursive calls are allowed, like it is specified in the grammar of C0
Expression Expression() :
{ Expression expression; }
{
  (
    <LPAREN> Expression() <RPAREN>
    | <INTEGER_LITERAL>
    | <TRUE> 
    | <FALSE> 
    | <NULL>
    | UnaryOp() Expression()
    | <ALLOC> <LPAREN> Type() <RPAREN>
    | <ALLOC_ARRAY> <LPAREN> Type() <COMMA> Expression() <RPAREN>
    | VID() [ <LPAREN> [ Expression() (<COMMA> Expression())* ] <RPAREN> ]
  )
  [
    <HOOK> Expression() <COLON> Expression()
    | <DOT> FID() [ <LBRACKET> Expression() <RBRACKET> ]
    | <FIELD_DEREF> FID() [ <LBRACKET> Expression() <RBRACKET> ]
    | <LBRACKET> Expression() <RBRACKET>
  ]
  [ BinaryOp() Expression() ]
  {
    expression = new BinaryExpression(); 
    return expression;
  }
}



///////////////////////////////////////
/////           Simple            /////
///////////////////////////////////////

Simple Simple() :
{ Simple simple; }
{
  (  
    // Here we have again an infinite choice conflict, because Lv() can be ( Lv() ) and Expression() can be ( Expression() ) etc.
    // So we need an infinite lookahead to make the right decision e.g. for (((((((lv)))))))
    // BUT both expression AND lv can be ((((((( VID )))))))
    // TODO: MAYBE THERE IS A BETTER OPTION HERE??
    LOOKAHEAD(2147483647)
    Lv() (PostOp() | AsnOp() Expression())
    | Expression()
    | Type() VID() [ <ASSIGN> Expression() ]
  )
  { return new Simple(); }
}



///////////////////////////////////////
/////          Statement          /////
///////////////////////////////////////

Statement STMT() :
{
  Statement statement;
}
{
  ( 
      statement = SimpleStatement()
    | statement = IfStatement()   
    | statement = WhileStatement()   
    | statement = ForStatement()
    | statement = ReturnStatement()
    | statement = BlockStatement()
  )
  { return statement; }
}

SimpleStatement SimpleStatement() :
{
  Simple simple;
}
{
  simple = Simple() <SEMICOLON>
  { return new SimpleStatement(simple); }
}


IfStatement IfStatement() :
{
  Expression condition;
  Statement ifStatement;
  ElseStatement elseStatement = null;
}
{
  <IF> <LPAREN> condition = Expression() <RPAREN> 
  ifStatement = STMT() 
  [
    // This is needed to prevent the warning. The grammar is correct the parser will throw a warning. 
    // If you want to know why look at https://javacc.org/tutorials/lookahead (search for dangling-else)
    LOOKAHEAD(1) 
    <ELSE> 
    { Statement statement; }
    statement = STMT()
    { elseStatement = new ElseStatement(statement); }
  ]
  { return new IfStatement(condition, ifStatement, elseStatement); }
}

WhileStatement WhileStatement() :
{
  Expression condition;
}
{
  <WHILE> <LPAREN> condition = Expression() <RPAREN> STMT()
  { return new WhileStatement(condition); }
}

ForStatement ForStatement() :
{
  Simple initialization = null;
  Expression condition;
  Simple increment = null;
  Statement statement;
}
{
  <FOR> <LPAREN> 
  [ initialization = Simple()] <SEMICOLON> 
  condition = Expression() <SEMICOLON>
  [ increment = Simple()] <RPAREN> 
  statement = STMT()
  { return new ForStatement(initialization, condition, increment, statement); }
}

ReturnStatement ReturnStatement() :
{
  Expression expression = null;
}
{
  <RETURN> [ expression = Expression() ] <SEMICOLON>
  { return new ReturnStatement(expression); }
}

BlockStatement BlockStatement() :
{
  List<Statement> statements = new ArrayList<Statement>();
}
{
  <LBRACE> 
    (
      { Statement statement; }
      statement = STMT()
      { statements.add(statement); }
    )* 
  <RBRACE>
  { return new BlockStatement(statements); }
}

///////////////////////////////////////
/////     Global Definition       /////
///////////////////////////////////////

Definition GDEFN() :
{
  Definition node;
}
{
  ( 
    // struct id {...} -> struct definition ; 
    // struct id func() {...} -> function declaration ---- We need at least 3 TOKENS to make the right choice
    LOOKAHEAD(3) 
    node = GlobalStructDefinition()
    | node = GlobalFunctionDefinition()
  )
  { return node; }
}

StructDefinition GlobalStructDefinition() :
{
  StructIdentifier structId;
  List<FieldDefinition> fieldDefs = new ArrayList<FieldDefinition>();
}
{
  <STRUCT> structId = SID() <LBRACE> 
  (
    { FieldDefinition fieldDef; }
    fieldDef = FieldDefinition()
    { fieldDefs.add(fieldDef); }
  )* 
  <RBRACE> <SEMICOLON>
  { return new StructDefinition(new StructType(structId), structId, fieldDefs); }
}

FieldDefinition FieldDefinition():
{
  Type fieldType;
  FieldIdentifier fieldId;
}
{
  fieldType = Type() fieldId = FID() <SEMICOLON>
  {
    return new FieldDefinition(fieldType, fieldId);
  }
}

FunctionDefinition GlobalFunctionDefinition() :
{
  Type returnType;
  VariableFunctionIdentifier funcId;
  List<ParameterDefinition> parameterDefs;
  List<Statement> statements = new ArrayList<Statement>();
}
{
  returnType = Type()
  funcId = VID() 
  <LPAREN> parameterDefs = ParameterDefinitions() <RPAREN> 
  <LBRACE> 
    ( 
      { Statement statement; }
      statement = STMT()
      { statements.add(statement); } 
    )* 
  <RBRACE>
  { return new FunctionDefinition(returnType, funcId, parameterDefs, statements); }
}


///////////////////////////////////////
/////      Global Declaration     /////
///////////////////////////////////////

Declaration GDECL() :
{
  Declaration node;
}
{
  (
    LOOKAHEAD(3) // struct id; -> struct declaration ; struct id func(); -> function declaration ---- We need at least 3 TOKENS to make the right choice
    node = GlobalStructDeklaration()
    |
    node = GlobalFunctionDeclartion()
  )
  { return node; }
}

StructDeclaration GlobalStructDeklaration() :
{
  StructIdentifier structId;
}
{
  <STRUCT> structId = SID() <SEMICOLON>
  { return new StructDeclaration(new StructType(structId), structId); }
}

FunctionDeclaration GlobalFunctionDeclartion() :
{
  Type returnType;
  VariableFunctionIdentifier funcId;
  List<ParameterDefinition> parameterDefs;
}
{
  returnType = Type() funcId = VID() <LPAREN> parameterDefs = ParameterDefinitions() <RPAREN> <SEMICOLON>
  { return new FunctionDeclaration(returnType, funcId, parameterDefs); }
}

List<ParameterDefinition> ParameterDefinitions() :
{
  List<ParameterDefinition> parameterDefs = new ArrayList<ParameterDefinition>();
  Type firstParaType;
  ParameterIdentifier firstParaId;
}
{
  [ 
    firstParaType = Type() firstParaId = PARAID() 
    { parameterDefs.add(new ParameterDefinition(firstParaType, firstParaId)); } 
    (
      {   
        Type additionalParaType;
        ParameterIdentifier additionalParaId;         
      }
      <COMMA> additionalParaType = Type() additionalParaId = PARAID()
      { parameterDefs.add(new ParameterDefinition(additionalParaType, additionalParaId)); }
    )* 
  ]
  { return parameterDefs; }
}
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = true;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(C0Parser)

package parser;

import astnodes.*;

public class C0Parser {
}

PARSER_END(C0Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* RESERVED WORDS: Page 15 C0-Ref */
{
  < INT: "int" >
| < BOOLEAN: "bool" >
| < STRING: "string" >
| < CHAR: "char" >
| < VOID: "void" >
| < STRUCT: "struct" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < FOR: "for" >
| < CONTINUE: "continue" >
| < BREAK: "break" >
| < RETURN: "return" >
| < ASSERT: "assert" >
| < TRUE: "true" >
| < FALSE: "false" >
| < NULL: "NULL" >
| < ALLOC: "alloc" >
| < ALLOC_ARRAY: "alloc_array" >
}

TOKEN : /* OPERATORS: Page 18 C0-Ref */
{
  < PAR_L: "(" >
| < PAR_R: ")">
| < ARR_SUB_L: "[">
| < ARR_SUB_R: "]">
| < FIELD_DEREF: "->" >
| < FIELD_SEL: "." >
| < BANG: "!" >
| < TILDE: "~" >
| < STAR: "*" >
| < INCR: "++" >
| < DECR: "--" >
| < SLASH: "/" >
| < MOD: "%" > // was called REM before, i think MOD is more descriptive. ~S.H.
| < PLUS: "+" >
| < MINUS: "-" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < GT: ">" >
| < EQ: "==" >
| < NE: "!=" >
| < BIT_AND: "&" >
| < XOR: "^" >
| < BIT_OR: "|" >
| < SC_AND: "&&" >
| < SC_OR: "||" >
| < HOOK: "?" >
| < COLON: ":" >
| < ASSIGN: "=" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < REMASSIGN: "%=" >
| < ANDASSIGN: "&=" >
| < XORASSIGN: "^=" >
| < ORASSIGN: "|=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN [IGNORE_CASE] :
{
  < IDENTIFIER: ["a"-"z"] ( ["a"-"z"] | ["0"-"9"] )* >
}

/* COMMENTS */
MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> 
SKIP : // Sidenote: The original had "SPECIAL_TOKEN" instead of "SKIP"
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT> 
SKIP :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] > // ~[] = all characters
}
/* END COMMENTS */

Node parseTree() :
{
  Node rootNode = new Node();
}
{
  //global Sachen parsen <prog> (globale Deklarationen und globale Funktionen)
  // Danach Statements, die expression usw.
  
  basic_expr() <EOF> 
  {
     return rootNode;
  }
}

void basic_expr() :
{}
{
  <IDENTIFIER> <ASSIGN> <INTEGER_LITERAL>
}
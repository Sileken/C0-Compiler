options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(C0Parser)

public class C0Parser {

  // public Node rootNode() {
  //   //Start parsing ...
  //   return new Node();
  // }  
  public static void main(String args[]) throws ParseException {
      if(args.length > 0)
      {
        try {
          C0Parser parser = new C0Parser(new java.io.FileInputStream(args[0]));
          parser.Input();
          System.out.println("Success!");
        } catch (java.io.FileNotFoundException e) {
          System.out.println("C0 Compiler: File " + args[0] + " not found.");
          return;
        } 
      }
      else // No filepath was given. Use input from terminal.
      {
          System.out.println("Beenden sie die Eingabe mit einem Punkt:");
          C0Parser parser = new C0Parser(System.in);
          parser.Input(); 
      }

    }

}

PARSER_END(C0Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* RESERVED WORDS */
{
  < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < ELSE: "else" >
| < FALSE: "false" >
| < FINALLY: "finally" >
| < FOR: "for" >
| < IF: "if" >
| < INT: "int" >
| < LONG: "long" >
| < NULL: "null" >
| < RETURN: "return" >
| < STATIC: "static" >
| < SWITCH: "switch" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN [IGNORE_CASE] :
{
  < IDENTIFIER: ["a"-"z"] ( ["a"-"z"] | ["0"-"9"] )* >
}

void doParse() :
{}
{
  basic_expr() <EOF>
}

void basic_expr() :
{}
{
  <IDENTIFIER> <ASSIGN> <INTEGER_LITERAL>
}